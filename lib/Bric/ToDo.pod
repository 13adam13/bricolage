=head1 NAME

Bric::ToDo - Bricolage To Do List

=head1 VERSION

$Revision: 1.68 $

=head1 DATE

$Date: 2002-08-16 16:34:41 $

=head1 DESCRIPTION

This document lists the items on Bricolage's To Do list.

=head1 OVERVIEW

Bricolage versions are determined by the types of changes required. Minor
version numbers require no changes to the database schema (though data in the
database can be added or changed, e.g, for new preferences), and require few
changes to the libraries. The idea is to try to use the existing tools in the
libraries and the database to do more in the UI, though minor changes to the
libraries are allowed. Major version numbers, on the other hand, change when the
database schema has been altered, or when the changes to the libraries are
significant (including the addition of new libraries), or simply when
significant features have been added.

At any one time, we will list the tasks that contributors have accepted for the
next minor version and for the next major version. After that, we list other
outstanding to do items in descending order of importance: "High Priority Minor
Items," "High Priority Major Items," "Low Priority Minor Items," and "Low
Priority Major Items." Developers who wish to volunteer to take on one or more
of these tasks should announce their plans and version goal on the
Bricolage Developers list <bricolage-devel@lists.sourceforge.net>. Contributions
are welcome.

At the end of this document, the "Blue Sky" section features items that will
likely never be done for the 1.x development of Bricolage, but we'd like to keep
in mind as long term goals further down the line.

=cut

################################################################################

=head2 High Priority Minor Items

=over

=item *

Create category browser so that, in interfaces where users have to navigate
categories (e.g., when creating subcategories, or when assigning an asset to a
category), they can do it hierarchically, rather than have to look at a long-ass
list of all categories.

=item *

When clicking "New" for an existing contributor, allow choice of Contributor
Type, and B<then> role. Right now, if you want an existing to be a contributor
of a different type, you have to create a new person, and this duplication is
bad.

=item *

When adding a new person, have user search for existing persons first to ensure
that the person doesn't already exist. That is, when adding a new user, it could
be that the person being added is already in the system as a contributor, so the
new user object can be based on the person object underlying the contributor
object. Similarly, when adding a new contributor, the person being added could
have an existing person record as an existing contributor or user.

=item *

Write context-sensitive help for those pages that are still missing it.

=item *

Pare down number of default User groups. I suggest eliminating those that relate
to only a single admin menu item.

=item *

Resolve the "Adding Element and hitting Cancel" issue (See
http://bricolage-bugzilla.thepirtgroup.com/show_bug.cgi?id=3).

=item *

Add Keyword Management interface to centrally manage keywords. Also add
interface to select from existing keywords for associating with assets.

=item *

Write distribution documentation.

=item *

Add preferences and the code to enforce them to allow admins to specify that
keywords follow certain rules, such as being all lowercase, or to exclude
certain words (e.g., About.com excludes the keyword "about.com").

=item *

Add ability to "View" a related story from within the related story Element, so
that editors can view what's actually in a story before deciding what to fill in
to the fields of the related story element itself.

=item *

Add "Check In and Remove from Workflow" button to asset editing screens.

=item *

If a field in an Element is marked "Required," then require that it be filled
in in the profile (via JavaScript).

=item *

Add "Clone Asset" button to Media and Story profiles (I think that the API and
maybe even the callbacks are already done).

=item *

Add ability to "undeploy" templates without deactivating them.

=item *

Add a check that a user has selected at least one output channel when creating a
new element. Elements without output channels cause Bricolage indigestion.

=item *

Add option to the installation system to always use the defaults and
never prompt the user.

=item *

Enhance the upgrade system to allow upgrading of installations that
did not use the new installation system.  These installs won't have a
conf/install.db to guide the upgrade and the upgrade system will have
to compensate by probing bricolage.conf and asking the user questions
about their setup.

=item *

Add "make uninstall" support to installation system.

=item *

Add search by category and search by story/media type to the Find Stories and
Find Media interfaces. This feature would be in the Advanced search interface,
but for those who want to have it present all the time, see the next item.

=item *

Add preference to make advanced search in Find Stories and/or Find Media the
default search form when you go to those screens.

=item *

Move Bric::Util::Fault::Exception objects up, so that they become subclasses
of Bric::Util::Fault, instead.

=item *

Update exception handling to allow for option to send error details to a valid
email address or URI. The error page (500.mc) would have a form with all the
details in hidden fields, and a button. When the button is pressed, the info
in the form would either be sent to the specified email adddress or to the
specified URL (on the assumption that that URL would process the form data).

=item *

Change the behavior of the popup window so that it doesn't pop-up, but instead
presents a simple page with a link to the new window.

=item *

Add a checkbox to the Bulk Edit page. When the box is checked, line wrapping
will be preserved as pasted (e.g., when pasting in poetry). When it's not
checked, the lines will be unwrapped into a single line (as happens now), so
that they wrap inside the textarea box nicely. It will be unchecked by default
to keep the interface basically the same as it is now.

=back

=cut

################################################################################

=head2 High Priority Major Items

=over 4

=item *

Add regression test suite.

=item *

Add browser-based UI for scheduled burning/syndication.

=item *

Add browser-based UI for mass publication and distribution. This will
primarily be useful for template redesigns that need to be applied to a large
set of pages or a whole site.

=item *

Add better tools for handling special characters (e.g., high ASCII, Latin-1
letters with umlauts and accents and such). May need to select a character set
to be associated with output channels, and convert characters based on the
character set.

=item *

Improve the formBuilder interface such that existing fields can be edited, and
there is better control over how the fields are created.

=item *

Simplify associating media with stories. Users should be able to associate
media with stories just as they do contributors and keywords. However, the new
media objects they upload should be put into the repository as normal media
assets. New uploads of the same media file increment the version numbers.

=back

=cut

################################################################################

=head2 Low Priority Minor Items

=over 4

=item *

Add "Check all" button that uses JS to select all the select checkboxes on a
publish desk and My Workspace. There's a button in My Alerts that can be copied
for this purpose.

=item *

Modify JavaScript and CSS to work entirely in JavaScript, rather than rely on
server-side client identification. This way, the script files can just be sent
to the browser once, rather than re-executing the Mason versions of these files
for every request. Note that this is how the CSS for the help pages currently
works.

=item *

Add interface for editing Contact Types.

=item *

Add a preference to name the Bricolage instance. This name could be used in
window titles as well as in the "Welcome to Bricolage" message on the login
page.

=item *

Dump Bric::App::ReqCache. Use $r->pnotes() instead.

=item *

Add ability to reverse the order of search results in the manager screens
(especially for assets).

=item *

Fix search interfaces so that when a search term is entered and the user hits
Return/Enter rather than clicking the "Search" button, the search is actually
carried out.

=item *

Add preference for Contributors to be automatically added to assets as keywords.

=item *

Create makefile for distribution engine only.

=item *

Add support for Organizations.

=item *

Add support for addresses.

=item *

Add HTML Cleaning Action.

=item *

Add HTML Checking Action.

=item *

Add Akamaization Action.

=item *

Add Net::SFTP move method.

=item *

Link contributors to their assets in the -- provide a link in the Contributor
Manager and/or the Contributor Profile).

=item *

Add preferences for listManagers to indicate whether they should default to
expand or narrow behavior.

=item *

Add command-line argument to bric_ftpd that will kill the currently-running
instance.

=item *

Add autopopulation of video media type properties, such as codec, bit rate, fps,
length, etc. Use a tool such as RIFF::Info.

=item *

Change template deployment to not append the output-channel post_path to the
template filename. Currently the burners have hacks in them to look in the
post_path for templates but ultimately this should be fixed the right way. If
you choose to accept this mission you'll need to write an upgrade script to
correct template entries in the database and move deployed templates on the
filesystem.

=item *

Add interface for editing Media Types (a.k.a. MIME types) so that new ones can
be added.

=back

=cut

################################################################################

=head2 Low Priority Major Items

=over 4

=item *

Add keywords to media.  The underlying API and database changes are
complete - all that is left to do is add the user-interface.

=item *

Add a callback option to custom fields. This feature would allow custom Perl
code to be associated with the field, and to be executed when the field is
filled in by a user. This would perhaps be the best way to allow fields to be
"customized," e.g., when a field needs to be looked up in another database via
the DBI. Yes, this could be a security issue (a serious one!), but we put the
onus on the Bricolage administrator to ensure that the people with access
can't bollocks things up. We just have to make it difficult for people to hack
in and exploit such a field.

=item *

Add a Relational custom field option. This field would allow a a link to be
made to another arbitrary object in Bricolage. The custom field form would
have a select list of Bricolage object names (e.g., Story, User, Output
Channel, Event, etc.). When the user wishes to make the link, she's presented
with a manager-type search interface from which to find a pick the object she
wants.

=item *

Add support for Java templates.

=item *

Add user-created help for user-created fields (add a "Help Text" field to Form
Builder).

=item *

Make Session an object.

=item *

Add ordering to desks, such that their position in workflow can be ordered. This
will likely need some sort of attribute on the desks's membership in the group
for a workflow (since desks can be in multiple workflows).

=item *

Add a flag to the category object to indicate whether or not assets can be
associated with it, and then check that flag in the new asset profiles.

=item *

Add a flag to the category object to indicate whether or not the category is
allowed to have subcategories, and then check that flag in the category profile.

=item *

Allow some preferences to have values typed into a text field.

=item *

Allow some preferences to get new options entered by the users (e.g., for name
and date formats).

=item *

Add preference groupings (secret groups would probably work well) and present
the grouped preferences together in a profile. Then just list the preference
groups in the Preference Manager.

=item *

Add support for contributor contracts.

=item *

Add support for LDAP authentication.

=item *

Change way objects are deactivated (archived?) in the database such that, where
there are name uniqueness constraints, a new object can be created with the name
of a deleted one without any clashes (e.g., for Elements and Element Types).

=item *

Update all interface elements to use localization libraries. No text that
appears to the user should appear except in reference to a localization library.

=item *

Add support for Instant messaging (using Jabber server) in Alerts.

=item *

Add file system-like asset browsing (especially for templates and media).

=item *

Revamp Exceptions so that they use numbers to look themselves up -- so there's a
central repository of possible exceptions, and they are therefore easier to
document.

=item *

Create a different way of distinguishing which desks are shared and which are
not, rather than relying solely on the desk name.

=item *

Add directory (a.k.a. story index) support.

=item *

Have objects load their group IDs when they're selected in order to save time
checking permissions.

=item *

Add Group copying so that a new group can start with the settings (including
permissions) of an existing group.

=item *

Allow Element Types to be subelements. This means that all elements of a
particular type will be subelements, so that if you add or remove elements of
that type, they will automatically be subelements of whatever element for which
the type is defined.

=item *

Add specification for whether Elements added as Subelements of another are
"Required" or not -- just as we currently do for fields in an Element.

=item *

Create separate sand box for previewing stories with templates while templates
are under development -- that is, without deploying them.

=item *

Add support for individual user preferences that can override (some) global
preferences. (Also add group-level prefs?)

=item *

Allow multiple files to be associated with a single media asset (e.g., when
there's an image, a thumbnail, a high-res version, etc., all essentially for the
same asset).

=item *

Implement keyword synonyms.  This might include support for various
meanings among keywords and/or support for a prefered keyword among a
group of synonymous keywords.  Past versions of Bricolage (pre 1.3.2)
included an incomplete implementation that you might use as
inspiration. 

=back

=cut

################################################################################

=head2 Blue Sky

=over 4

=item *

Add basic project management. Tie project tasks to stops in the workflow.

=item *

Add support for concurrent checkouts, including support for conflict resolution.

=item *

Add support for display of deltas between versions -- something like what CVSWeb
does, in terms of allowing editors to see what has changed between versions of
an asset.

=item *

Create system of interserver communication and replication.

=item *

Integrate with CVS and/or Subversion.

=item *

Integrate with WebDAV (Slide? mod_dav?).

=item *

Add full-text indexing of the database.

=item *

Add strong type checking.

=item *

Add thorough directory (LDAP, NDS, ADS) integration, including group and
permission management.

=item *

Add support for document translation (e.g., Word, QuarkXPress, Acrobat, etc.).

=item *

Add support for skins -- different colors, etc, probably via preferences.

=item *

Add support for creating PDFs in templates. PDF support is available from the
CPAN: http://search.cpan.org/search?mode=module&query=PDF.

=item *

Allow Elements to be previewed before they're added.

=item *

Add permission granularity down to the User, property, field, and attribute
levels.

=item *

Version elements individually, separate from stories?

=item *

Add reporting, where reports can be templated and saved.

=item *

Allow items to move through different workflows and/or desks in parallel.

=back

=cut

################################################################################

=head1 AUTHOR

David Wheeler <david@wheeler.net>

=head1 SEE ALSO

L<Bric|Bric>

=cut
