-- Project: Bricolage
--
-- Target DBMS: PostgreSQL 7.1.2
-- Author: Michael Soderstrom <miraso@pacbell.net>
--

-- Add constraint to keep publish_status synched with publish_date.
ALTER TABLE media
ADD CONSTRAINT ck_media__publish_status CHECK (
    (
        publish_status = FALSE
        AND publish_date IS NULL
        AND first_publish_date IS NULL
    )
    OR (
        publish_status = TRUE
        AND publish_date IS NOT NULL
        AND first_publish_date IS NOT NULL
    )
);

ALTER TABLE media
ADD CONSTRAINT fk_usr__media FOREIGN KEY (usr__id)
	REFERENCES usr(id) ON DELETE RESTRICT;

ALTER TABLE media
ADD CONSTRAINT fk_element_type__media FOREIGN KEY (element_type__id)
	REFERENCES element_type(id) ON DELETE RESTRICT;

ALTER TABLE media
ADD CONSTRAINT fk_workflow__media FOREIGN KEY (workflow__id)
	REFERENCES workflow(id) ON DELETE RESTRICT;

ALTER TABLE media
ADD CONSTRAINT fk_site__media FOREIGN KEY (site__id)
	REFERENCES site(id) ON DELETE RESTRICT;

ALTER TABLE media
ADD CONSTRAINT fk_media__media_id FOREIGN KEY (alias_id)
	REFERENCES media(id) ON DELETE RESTRICT;

ALTER TABLE media
ADD CONSTRAINT fk_desk__media FOREIGN KEY (desk__id)
	REFERENCES desk(id) ON DELETE RESTRICT;

-- -----------------------------------------------------------------------------
-- Table media_instance

ALTER TABLE media_instance
ADD CONSTRAINT fk_media__media_instance FOREIGN KEY (media__id)
	REFERENCES media(id) ON DELETE CASCADE;

ALTER TABLE media_instance
ADD CONSTRAINT fk_category__media_instance FOREIGN KEY (category__id)
	REFERENCES category(id) ON DELETE CASCADE;

ALTER TABLE media_instance
ADD CONSTRAINT fk_media_type__media_instance FOREIGN KEY (media_type__id)
	REFERENCES media_type(id) ON DELETE CASCADE;

ALTER TABLE media_instance
ADD CONSTRAINT fk_usr__media_instance FOREIGN KEY (usr__id)
	REFERENCES usr(id) ON DELETE CASCADE;

ALTER TABLE media_instance
ADD CONSTRAINT fk_primary_oc__media_instance FOREIGN KEY (primary_oc__id)
	REFERENCES output_channel(id) ON DELETE CASCADE;

ALTER TABLE media_instance
ADD CONSTRAINT fk_source__media_instance FOREIGN KEY (source__id)
	REFERENCES source(id) ON DELETE RESTRICT;

-- Media URI constraint.
ALTER TABLE media_uri
ADD CONSTRAINT fk_media__media_uri FOREIGN KEY (media__id)
    REFERENCES media(id) ON DELETE CASCADE;

ALTER TABLE media_uri
ADD CONSTRAINT fk_media__site__id FOREIGN KEY (site__id)
REFERENCES site(id) ON DELETE CASCADE;

-- -----------------------------------------------------------------------------
-- Media to output channel mapping constraints
ALTER TABLE media__output_channel 
ADD CONSTRAINT fk_media__oc__media FOREIGN KEY (media_instance__id)
	REFERENCES media_instance(id) ON DELETE CASCADE;

ALTER TABLE media__output_channel 
ADD CONSTRAINT fk_media__oc__oc FOREIGN KEY (output_channel__id)
	REFERENCES output_channel(id) ON DELETE CASCADE;

-- Media to Contributor mapping constraints
ALTER TABLE media__contributor
ADD CONSTRAINT fk_media__media__contributor FOREIGN KEY (media_instance__id)
	REFERENCES media_instance(id) ON DELETE CASCADE;

ALTER TABLE media__contributor
ADD CONSTRAINT fk_member__media__contributor FOREIGN KEY (member__id)
	REFERENCES member(id) ON DELETE CASCADE;

-- -----------------------------------------------------------------------------
-- Table: media_member

ALTER TABLE    media_member
ADD CONSTRAINT fk_media__media_member FOREIGN KEY (object_id)
REFERENCES     media(id) ON DELETE CASCADE;

ALTER TABLE    media_member
ADD CONSTRAINT fk_member__media_member FOREIGN KEY (member__id)
REFERENCES     member(id) ON DELETE CASCADE;

-- Add triggers for media desk memberships.
CREATE OR REPLACE FUNCTION desk_has_media(
) RETURNS TRIGGER LANGUAGE PLPGSQL AS $$
BEGIN
    IF TG_OP = 'UPDATE' THEN
        IF NEW.desk__id = OLD.desk__id THEN RETURN NEW; END IF;
    END IF;
    IF NEW.desk__id > 0 THEN
        IF EXISTS (
            SELECT media_member.object_id
              FROM desk
              JOIN member       ON member.grp__id = desk.asset_grp
              JOIN media_member ON media_member.member__id = member.id
             WHERE desk.id                = NEW.desk__id
               AND media_member.object_id = NEW.id
        ) THEN RETURN NEW; END IF;
        RAISE EXCEPTION 'Desk % should have media % in its group but does not',
            NEW.desk__id, NEW.id;
    ELSIF TG_OP = 'UPDATE' THEN
        IF NOT EXISTS (
            SELECT media_member.object_id
              FROM desk
              JOIN member       ON member.grp__id = desk.asset_grp
              JOIN media_member ON media_member.member__id = member.id
             WHERE desk.id                = OLD.desk__id
               AND media_member.object_id = NEW.id
        ) THEN RETURN NEW; END IF;
        RAISE EXCEPTION 'Desk % should not have media % in its group but does',
            OLD.desk__id, NEW.id;
    ELSE
        RETURN NEW;
    END IF;
END;
$$;

CREATE CONSTRAINT TRIGGER media_is_on_desk
 AFTER INSERT OR UPDATE ON media
DEFERRABLE INITIALLY DEFERRED
 FOR EACH ROW EXECUTE PROCEDURE desk_has_media();

CREATE OR REPLACE FUNCTION desk_hasnt_media(
) RETURNS TRIGGER LANGUAGE PLPGSQL AS $$
BEGIN
    IF NOT EXISTS (
        SELECT media_member.object_id
          FROM desk
          JOIN member       ON member.grp__id = desk.asset_grp
          JOIN media_member ON media_member.member__id = member.id
         WHERE desk.id                = OLD.desk__id
           AND media_member.object_id = OLD.id
    ) THEN RETURN NEW; END IF;
    RAISE EXCEPTION 'Desk % should not have media % in its group but does',
        NEW.desk__id, NEW.id;
END;
$$;

CREATE CONSTRAINT TRIGGER media_not_on_desk
 AFTER DELETE ON media
DEFERRABLE INITIALLY DEFERRED
 FOR EACH ROW EXECUTE PROCEDURE desk_hasnt_media();

CREATE OR REPLACE FUNCTION set_member_media_desk_id(
) RETURNS TRIGGER LANGUAGE PLPGSQL AS $$
BEGIN
    UPDATE media
       SET desk__id = desk.id
      FROM member
      JOIN desk ON member.grp__id = desk.asset_grp
     WHERE media.id  = NEW.object_id
       AND member.id = NEW.member__id;
     RETURN NEW;
END;
$$;

CREATE TRIGGER set_member_media_desk_id
  AFTER INSERT OR UPDATE ON media_member
  FOR EACH ROW EXECUTE PROCEDURE set_member_media_desk_id();

CREATE OR REPLACE FUNCTION unset_member_media_desk_id(
) RETURNS TRIGGER LANGUAGE PLPGSQL AS $$
BEGIN
    UPDATE media
       SET desk__id = 0
      FROM member
      JOIN desk ON member.grp__id = desk.asset_grp
     WHERE media.id  = OLD.object_id
       AND member.id = OLD.member__id
       AND media.desk__id = desk.id;
     RETURN OLD;
END;
$$;

CREATE TRIGGER unset_member_media_desk_id
  BEFORE DELETE ON media_member
  FOR EACH ROW EXECUTE PROCEDURE unset_member_media_desk_id();
