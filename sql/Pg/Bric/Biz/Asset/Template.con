-- Project: Bricolage
--
-- Target DBMS: PostgreSQL 7.1.2
-- Author: Michael Soderstrom <miraso@pacbell.net>
--

-- -----------------------------------------------------------------------------
-- Table: template

ALTER TABLE template
    ADD CONSTRAINT fk_usr__template FOREIGN KEY (usr__id)
    REFERENCES usr(id) ON DELETE RESTRICT;

ALTER TABLE template
    ADD CONSTRAINT fk_output_channel__template FOREIGN KEY (output_channel__id)
    REFERENCES output_channel(id) ON DELETE RESTRICT;

ALTER TABLE template
    ADD CONSTRAINT fk_element_type__template FOREIGN KEY (element_type__id)
    REFERENCES element_type(id) ON DELETE RESTRICT;

ALTER TABLE template
    ADD CONSTRAINT fk_workflow__template FOREIGN KEY (workflow__id)
    REFERENCES workflow(id) ON DELETE RESTRICT;

ALTER TABLE template
    ADD CONSTRAINT fk_site__template FOREIGN KEY (site__id)
    REFERENCES site(id) ON DELETE RESTRICT;

ALTER TABLE template
    ADD CONSTRAINT fk_desk__template FOREIGN KEY (desk__id)
    REFERENCES desk(id) ON DELETE RESTRICT;

-- -----------------------------------------------------------------------------
-- Table: template_instance

ALTER TABLE template_instance
    ADD CONSTRAINT fk_template__template_instance FOREIGN KEY (template__id)
    REFERENCES template(id) ON DELETE CASCADE;

ALTER TABLE template_instance
    ADD CONSTRAINT fk_usr__template_instance FOREIGN KEY (usr__id)
    REFERENCES usr(id) ON DELETE RESTRICT;

ALTER TABLE template_instance
    ADD CONSTRAINT fk_category__template_instance FOREIGN KEY (category__id)
    REFERENCES category(id) ON DELETE RESTRICT;

-- -----------------------------------------------------------------------------
-- Table: template_member

ALTER TABLE    template_member
ADD CONSTRAINT fk_template__template_member FOREIGN KEY (object_id)
REFERENCES     template(id) ON DELETE CASCADE;

ALTER TABLE    template_member
ADD CONSTRAINT fk_member__template_member FOREIGN KEY (member__id)
REFERENCES     member(id) ON DELETE CASCADE;

-- Add triggers for template desk memberships.
CREATE OR REPLACE FUNCTION desk_has_template(
) RETURNS TRIGGER LANGUAGE PLPGSQL AS $$
BEGIN
    IF TG_OP = 'UPDATE' THEN
        IF NEW.desk__id = OLD.desk__id THEN RETURN NEW; END IF;
    END IF;
    IF NEW.desk__id > 0 THEN
        IF EXISTS (
            SELECT template_member.object_id
              FROM desk
              JOIN member          ON member.grp__id = desk.asset_grp
              JOIN template_member ON template_member.member__id = member.id
             WHERE desk.id                = NEW.desk__id
               AND template_member.object_id = NEW.id
        ) THEN RETURN NEW; END IF;
        RAISE EXCEPTION 'Desk % should have template % in its group but does not',
            NEW.desk__id, NEW.id;
    ELSIF TG_OP = 'UPDATE' THEN
        IF NOT EXISTS (
            SELECT template_member.object_id
              FROM desk
              JOIN member          ON member.grp__id = desk.asset_grp
              JOIN template_member ON template_member.member__id = member.id
             WHERE desk.id                = OLD.desk__id
               AND template_member.object_id = NEW.id
        ) THEN RETURN NEW; END IF;
        RAISE EXCEPTION 'Desk % should not have template % in its group but does',
            OLD.desk__id, NEW.id;
    ELSE
        RETURN NEW;
    END IF;
END;
$$;

CREATE CONSTRAINT TRIGGER template_is_on_desk
 AFTER INSERT OR UPDATE ON template
DEFERRABLE INITIALLY DEFERRED
 FOR EACH ROW EXECUTE PROCEDURE desk_has_template();

CREATE OR REPLACE FUNCTION desk_hasnt_template(
) RETURNS TRIGGER LANGUAGE PLPGSQL AS $$
BEGIN
    IF NOT EXISTS (
        SELECT template_member.object_id
          FROM desk
          JOIN member       ON member.grp__id = desk.asset_grp
          JOIN template_member ON template_member.member__id = member.id
         WHERE desk.id                = OLD.desk__id
           AND template_member.object_id = OLD.id
    ) THEN RETURN NEW; END IF;
    RAISE EXCEPTION 'Desk % should not have template % in its group but does',
        NEW.desk__id, NEW.id;
END;
$$;

CREATE CONSTRAINT TRIGGER template_not_on_desk
 AFTER DELETE ON template
DEFERRABLE INITIALLY DEFERRED
 FOR EACH ROW EXECUTE PROCEDURE desk_hasnt_template();

CREATE OR REPLACE FUNCTION set_member_template_desk_id(
) RETURNS TRIGGER LANGUAGE PLPGSQL AS $$
BEGIN
    UPDATE template
       SET desk__id = desk.id
      FROM member
      JOIN desk ON member.grp__id = desk.asset_grp
     WHERE template.id  = NEW.object_id
       AND member.id = NEW.member__id;
     RETURN NEW;
END;
$$;

CREATE TRIGGER set_member_template_desk_id
  AFTER INSERT OR UPDATE ON template_member
  FOR EACH ROW EXECUTE PROCEDURE set_member_template_desk_id();

CREATE OR REPLACE FUNCTION unset_member_template_desk_id(
) RETURNS TRIGGER LANGUAGE PLPGSQL AS $$
BEGIN
    UPDATE template
       SET desk__id = 0
      FROM member
      JOIN desk ON member.grp__id = desk.asset_grp
     WHERE template.id  = OLD.object_id
       AND member.id = OLD.member__id
       AND template.desk__id = desk.id;
     RETURN OLD;
END;
$$;

CREATE TRIGGER unset_member_template_desk_id
  BEFORE DELETE ON template_member
  FOR EACH ROW EXECUTE PROCEDURE unset_member_template_desk_id();
