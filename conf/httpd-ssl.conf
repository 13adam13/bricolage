## httpd.conf -- Bricolage Apache configuration file.
##
## VERSION: $Revision$
## $Date$

ServerType standalone
DefaultType text/html
RedirectMatch permanent .*/favicon\.ico$ /media/images/favicon.ico

PerlPassEnv BRICOLAGE_ROOT

<Perl>
    use File::Spec::Functions ();
    BEGIN {
      $ENV{BRICOLAGE_ROOT} ||= '/usr/local/bricolage';
      unshift(@INC, File::Spec::Functions::catdir($ENV{BRICOLAGE_ROOT}, 'lib'));
    };
    use Bric::Config qw(:conf :sys_user :ssl :qa);
    use Bric::App::Handler;
    use Bric::App::AccessHandler;
    use Bric::App::CleanupHandler;
    use Bric::App::Auth;
    @Listen               = ( [ LISTEN_PORT ], [ 443 ] );
    $ServerRoot           = APACHE_SERVER_ROOT;
    $PidFile              = PID_FILE;
    $User                 = '"#' . SYS_USER . '"';
    $Group                = '"#' . SYS_GROUP . '"';
    $KeepAlive            = KEEP_ALIVE;
    $MaxKeepAliveRequests = MAX_KEEP_ALIVE_REQUESTS;
    $KeepAliveTimeout     = KEEP_ALIVE_TIMEOUT; 
    $MinSpareServers      = MIN_SPARE_SERVERS;
    $MaxSpareServers      = MAX_SPARE_SERVERS;
    $StartServers         = START_SERVERS;
    $MaxClients           = MAX_CLIENTS;
    $MaxRequestsPerChild  = MAX_REQUESTS_PER_CHILD;
    $ServerAdmin          = SERVER_ADMIN;
    $ServerName           = SERVER_NAME;
    $ErrorDocument        = "403 https://${\SERVER_NAME()}/login";
    $DocumentRoot         = DOCUMENT_ROOT;
    $ErrorLog             = ERROR_LOG;
    $LogLevel             = LOG_LEVEL;
    $LogFormat            = LOG_FORMAT;
    $CustomLog            = CUSTOM_LOG;
    $TypesConfig          = TYPES_CONFIG;
    $UseCanonicalName     = USE_CANONICAL_NAME;
    $HostnameLookups      = HOST_NAME_LOOKUPS;
    $ServerSignature      = SERVER_SIGNATURE;
    $Timeout              = TIMEOUT;
    if (SCORE_BOARD_FILE) {
        $ScoreBoardFile   = SCORE_BOARD_FILE;
    }
    if (PREVIEW_LOCAL) {
        require Bric::App::PreviewHandler;
        # This will slow down every request; thus we recommend that previews
        # not be local.
        $PerlTransHandler = 'Bric::App::PreviewHandler::uri_handler';
    }
    if (QA_MODE) {
        $PerlWarn = 'On';
    }
</Perl>
<Location '/'>
    Options Indexes FollowSymLinks MultiViews
    AllowOverride None
    Order allow,deny
    Allow from all
    SetHandler perl-script
    PerlHandler Bric::App::Handler
    PerlAccessHandler Bric::App::AccessHandler
    PerlCleanupHandler Bric::App::CleanupHandler
</Location>
<Location /logout>
    # This will handle logging people out.
    PerlAccessHandler Bric::App::AccessHandler::logout_handler
    PerlCleanupHandler Bric::App::CleanupHandler
</Location>
<Location /login>
   Allow from all
   SetHandler perl-script
   PerlAccessHandler Bric::App::AccessHandler::okay
   PerlHandler Bric::App::Handler
   PerlCleanupHandler Bric::App::CleanupHandler
</Location>
<Location /media>
    # Allow free access to images.
    SetHandler default-handler
    PerlAccessHandler Apache::OK
    PerlCleanupHandler Apache::OK
</Location>
<Location /dist>
    SetHandler perl-script
    PerlHandler Bric::Dist::Handler
</Location>
<Location /perl-status>
    SetHandler  perl-script
    PerlHandler Apache::Status
    PerlAccessHandler Apache::OK
    PerlCleanupHandler Apache::OK
</Location>
<Location /data>
    # This will serve media assets and previews.
    SetHandler default-handler
</Location>
<Perl>
    if (PREVIEW_LOCAL) {
        my $prev_loc = '/' . join('/', PREVIEW_LOCAL);
        if (PREVIEW_MASON) {
            # We need to take some special steps to ensure that Mason properly
            # handles the request.
            $Location{$prev_loc} = {
              SetHandler  => 'perl-script',
              PerlFixupHandler => 'Bric::App::PreviewHandler::fixup_handler',
              PerlHandler => 'Bric::App::Handler'
            };
        } else {
            # This will ensure that the documents are not cached by the browser, so
            # that the preview will always serve the most recently burned file.
            $Location{$prev_loc} =
              { PerlFixupHandler => '"sub { $_[0]->no_cache(1); return Apache::OK; }"' };
        }
    }
</Perl>

IndexOptions FancyIndexing

# Document types.
AddEncoding x-compress Z
AddEncoding x-gzip gz tgz
AddLanguage da .dk
AddLanguage nl .nl
AddLanguage en .en
AddLanguage et .ee
AddLanguage fr .fr
AddLanguage de .de
AddLanguage el .el
AddLanguage he .he
AddCharset ISO-8859-8 .iso8859-8
AddLanguage it .it
AddLanguage ja .ja
AddCharset ISO-2022-JP .jis
AddLanguage kr .kr
AddCharset ISO-2022-KR .iso-kr
AddLanguage no .no
AddLanguage pl .po
AddCharset ISO-8859-2 .iso-pl
AddLanguage pt .pt
AddLanguage pt-br .pt-br
AddLanguage ltz .lu
AddLanguage ca .ca
AddLanguage es .es
AddLanguage sv .se
AddLanguage cz .cz
AddLanguage ru .ru
AddLanguage tw .tw
AddCharset Big5         .Big5    .big5
AddCharset WINDOWS-1251 .cp-1251
AddCharset CP866        .cp866
AddCharset ISO-8859-5   .iso-ru
AddCharset KOI8-R       .koi8-r
AddCharset UCS-2        .ucs2
AddCharset UCS-4        .ucs4
AddCharset UTF-8        .utf8
LanguagePriority en da nl et fr de el it ja kr no pl pt pt-br ru ltz ca es sv tw
AddType application/x-tar .tgz

BrowserMatch "RealPlayer 4\.0" force-response-1.0
BrowserMatch "Java/1\.0" force-response-1.0
BrowserMatch "JDK/1\.0" force-response-1.0

AddType application/x-x509-ca-cert .crt
AddType application/x-pkcs7-crl    .crl

SSLRandomSeed startup builtin
SSLRandomSeed connect builtin

<Perl>
    $SSLPassPhraseDialog    = SSL_PASS_PHRASE_DIALOG;
    $SSLSessionCache        = SSL_SESSION_CACHE;
    $SSLSessionCacheTimeout = SSL_SESSION_CACHE_TIMEOUT;
    $SSLMutex               = SSL_MUTEX;
    $SSLLog                 = SSL_LOG;
    $SSLLogLevel            = SSL_LOG_LEVEL;

    $VirtualHost{'_default_:443'} = {
        SSLEngine             => 'on',
        SSLCipherSuite        => SSL_CIPHER_SUITE,
        SSLCertificateFile    => SSL_CERTIFICATE_FILE, 
        SSLCertificateKeyFile => SSL_CERTIFICATE_KEY_FILE,
        Location              => {
            '/login' => {
                Allow              => 'from all',
                SetHandler         => 'perl-script',
	        PerlAccessHandler  => 'Bric::App::AccessHandler::okay',
                PerlHandler        => 'Bric::App::Handler',
                PerlCleanupHandler => 'Bric::App::CleanupHandler'
	    }
        }
    }
</Perl>
