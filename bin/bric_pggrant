#!/usr/bin/perl -w
use strict;

=pod

=head1 NAME

bric_pgmakegrants

=head1 SYNOPSIS

This script analyses the postgres sql script which is to create the Bricolage
DB, and creates a script granting the correct permissions for each object CREATED

=head1 AUTHOR

Mark Jaroski <mark@geekhive.net>

=cut

use Getopt::Std;

our $VERSION = ( qw$Revision: 1.1.2.3 $ )[-1];
our ($opt_h, $opt_v, $opt_o, $opt_f, $opt_u);

my $username;
my $infile;
my $outfile;
my @object;

getopts('hvu:f:o:');
usage() if $opt_h;
version() if $opt_v;

die "-u, -f, and -o are required.  (Try -h first). Stopped"
	unless ($opt_o && $opt_f && $opt_u);

$username = $opt_u;
$infile = $opt_f;
$outfile = $opt_o;

@object = get_object_list();

open OUT, ">$outfile";
print OUT "-- this file was generated by $0\n\n";
foreach my $obj (@object) {
	print_grant($obj);
}
close OUT;


sub get_object_list {
	my @obj;
	open IN, $infile;
	while (<IN>) {
		# get a list of create statments
		if (/^CREATE/) {
			# remove SQL keywords etc
			s/(^CREATE| TABLE| INDEX| UNIQUE| SEQUENCE| FUNCTION|\(.*$| ON.*$| START.*$)//g;
			# remove leading and trailing whitespace
			s/(^\s*|\s$)//g;
			push @obj, $_;
		}
	}
	close IN;
	return @obj;
}

sub print_grant {
	my $object = $_[0];
	print OUT qq{
REVOKE ALL on "$object" from PUBLIC;
GRANT ALL on "$object" to "postgres";
GRANT INSERT,UPDATE,DELETE,SELECT on "$object" to "$username";

}
}


sub usage {
    print qq{
Usage: $0 

Supported Options:
  Options marked with "*" are required.
* -u User to whome to grant permissions
* -f SQL script to anylise
* -o File to output
  -h Print this usage statement.
  -v Print the version number.

};

exit 0;

}

sub version {
    print "\nBricolage postgres grant generator version $VERSION\n";
    usage();
}

