#!/usr/bin/perl -w
use strict;

=pod

=head1 NAME

bric_apachectl

=head1 SYNOPSIS

   bric_apachectl start

   bric_apachectl stop

   bric_apachectl restart

=head1 DESCRIPTION

This script controls the Bricolage Apache server. The usage of the script is the
same as the normal apache "apachectl" script but only "start", "stop" and
"restart" are supported. Also, "restart" performs a hard stop and start since a
SIGHUP isn't enough for mod_perl.

Usage information can be obtained by running the script with no arguments.

=head1 AUTHOR

Sam Tregar <stregar@about-inc.com>

=cut

# how long to wait for stop on restart (in seconds)
use constant MAX_RESTART_WAIT => 10;

$|++;

BEGIN {
    $ENV{BRICOLAGE_ROOT} ||= '/usr/local/bricolage';
    eval { require Bric };
    if ($@) {
	# We need to set PERL5LIB.
	require File::Spec::Functions;
	my $lib =  File::Spec::Functions::catdir($ENV{BRICOLAGE_ROOT}, 'lib');
	unshift @INC, $lib;
	$ENV{PERL5LIB} = defined $ENV{PERL5LIB} ? "$ENV{PERL5LIB}:$lib" : $lib;

	# Try again.
	eval { require Bric };
	die "Cannot locate Bricolage libraries.\n" if $@;
    }
};

use Bric::Config qw(:apachectl);

# the httpd command - uses ssl config if SSL_ENABLE is set
my $httpd = APACHE_BIN . " -f " . APACHE_CONF;
$httpd .= ' -DSSL' if SSL_ENABLE;

# the pid file
my $pid_file = PID_FILE;

# get status
my $running = 0;
my $pid;
if (-e $pid_file) {
    $pid = `cat $pid_file`;
    chomp $pid;
    if ($pid and kill(0, $pid)) {
	$running = 1;
    }
}

# check for args
usage() unless @ARGV;

my $command = shift @ARGV;

if ($command eq 'start') {
    if ($running) {
	print "bric_apachectl $command: httpd (pid $pid) already running\n";
	exit;
    }

    # clear the cache before starting the server to avoid stale cache data
    require Bric::App::Cache;
    Bric::App::Cache->clear();

    print "bric_apachectl $command: starting httpd\n";
    unless (system($httpd)) {
	print "bric_apachectl $command: httpd started\n";
	exit;
    } else {
	print "bric_apachectl $command: httpd could not be started\n";
    exit 3;
    }
}

if ($command eq 'stop') {
    unless ($running) {
	print "bric_apachectl $command: httpd not running\n";
	exit;
    }
    if (kill 15, $pid) {
	print "bric_apachectl $command: httpd stopped\n";
	exit;
    } else {
	print "bric_apachectl $command: httpd could not be stopped\n";
	exit 3;
    }
}

if ($command eq 'restart') {
    # stop
    if ($running) {
	if (kill 15, $pid) {
	    print "bric_apachectl $command: waiting for httpd to stop";
	} else {
	    print "bric_apachectl $command: httpd could not be stopped\n";
	    exit 3;
	}

	# wait for stop - check pid file for removal
	my $stopped = 0;
	for my $wait (0 .. MAX_RESTART_WAIT) {
	    if (not -e $pid_file) {
		$stopped = 1;
		last;
	    }
	    print ".";
	    sleep 1;
	}

	if ($stopped) {
	    print "\nbric_apachectl $command: httpd stopped\n";
	} else {
	    print "\nbric_apachectl $command: httpd not stopped in time\n";
	    exit;
	}

    }
    # clear the cache before starting the server to avoid stale cache data
    require Bric::App::Cache;
    Bric::App::Cache->clear();

    # start
    print "bric_apachectl $command: starting httpd\n";
    unless (system($httpd)) {
	print "bric_apachectl $command: httpd started\n";
	exit;
    } else {
	print "bric_apachectl $command: httpd could not be started\n";
	exit 3;
    }
}

usage();

sub usage {
  print <<END;
usage: bric_apachectl (start|stop|restart)

start      - start httpd
stop       - stop httpd
restart    - restart httpd if running

END

  exit;
}
